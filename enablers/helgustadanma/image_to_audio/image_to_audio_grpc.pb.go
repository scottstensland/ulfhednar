// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: image_to_audio.proto

package image_to_audio

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImageToSoundService_UploadImage_FullMethodName = "/image_to_audio.ImageToSoundService/UploadImage"
	ImageToSoundService_UploadSound_FullMethodName = "/image_to_audio.ImageToSoundService/UploadSound"
)

// ImageToSoundServiceClient is the client API for ImageToSoundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The service definition.
type ImageToSoundServiceClient interface {
	UploadImage(ctx context.Context, in *ImageRequestWithMetadata, opts ...grpc.CallOption) (*SoundResponse, error)
	UploadSound(ctx context.Context, in *SoundRequestWithMetadata, opts ...grpc.CallOption) (*ImageResponse, error)
}

type imageToSoundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageToSoundServiceClient(cc grpc.ClientConnInterface) ImageToSoundServiceClient {
	return &imageToSoundServiceClient{cc}
}

func (c *imageToSoundServiceClient) UploadImage(ctx context.Context, in *ImageRequestWithMetadata, opts ...grpc.CallOption) (*SoundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SoundResponse)
	err := c.cc.Invoke(ctx, ImageToSoundService_UploadImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageToSoundServiceClient) UploadSound(ctx context.Context, in *SoundRequestWithMetadata, opts ...grpc.CallOption) (*ImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, ImageToSoundService_UploadSound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageToSoundServiceServer is the server API for ImageToSoundService service.
// All implementations must embed UnimplementedImageToSoundServiceServer
// for forward compatibility.
//
// The service definition.
type ImageToSoundServiceServer interface {
	UploadImage(context.Context, *ImageRequestWithMetadata) (*SoundResponse, error)
	UploadSound(context.Context, *SoundRequestWithMetadata) (*ImageResponse, error)
	mustEmbedUnimplementedImageToSoundServiceServer()
}

// UnimplementedImageToSoundServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImageToSoundServiceServer struct{}

func (UnimplementedImageToSoundServiceServer) UploadImage(context.Context, *ImageRequestWithMetadata) (*SoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedImageToSoundServiceServer) UploadSound(context.Context, *SoundRequestWithMetadata) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSound not implemented")
}
func (UnimplementedImageToSoundServiceServer) mustEmbedUnimplementedImageToSoundServiceServer() {}
func (UnimplementedImageToSoundServiceServer) testEmbeddedByValue()                             {}

// UnsafeImageToSoundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageToSoundServiceServer will
// result in compilation errors.
type UnsafeImageToSoundServiceServer interface {
	mustEmbedUnimplementedImageToSoundServiceServer()
}

func RegisterImageToSoundServiceServer(s grpc.ServiceRegistrar, srv ImageToSoundServiceServer) {
	// If the following call pancis, it indicates UnimplementedImageToSoundServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImageToSoundService_ServiceDesc, srv)
}

func _ImageToSoundService_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequestWithMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageToSoundServiceServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageToSoundService_UploadImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageToSoundServiceServer).UploadImage(ctx, req.(*ImageRequestWithMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageToSoundService_UploadSound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoundRequestWithMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageToSoundServiceServer).UploadSound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageToSoundService_UploadSound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageToSoundServiceServer).UploadSound(ctx, req.(*SoundRequestWithMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageToSoundService_ServiceDesc is the grpc.ServiceDesc for ImageToSoundService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageToSoundService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "image_to_audio.ImageToSoundService",
	HandlerType: (*ImageToSoundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadImage",
			Handler:    _ImageToSoundService_UploadImage_Handler,
		},
		{
			MethodName: "UploadSound",
			Handler:    _ImageToSoundService_UploadSound_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "image_to_audio.proto",
}

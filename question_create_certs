
give me the openssl commands to create self signed tls cert files for both golang grpc mtls server and client ... namely the sequence of openssl commands are

Generate CA key and certificate

which will create files  ca-key.pem  and  ca-cert.pem 

Generate server key and certificate signing request (CSR)

to create files server-key.pem  and  server.csr

Generate client key and certificate signing request (CSR)

to create files client-key.pem  and  client.csr 

and then openssl to create

file   client-cert.pem 

here is my golang gRPC server   cat server.go

 cat ./cmd/server/main.go 
package main

import (
	"context"
	"crypto/tls"
	"crypto/x509"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"net"
	"path/filepath"
	"sync"
	"time"

	"github.com/golang-jwt/jwt/v5"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
	"google.golang.org/protobuf/types/known/emptypb"

	// "userpb"
	// "github.com/scottstensland/ulfhednar/pkg/userpb"
	// userpb "github.com/scottstensland/ulfhednar/user"
	userpb "github.com/scottstensland/ulfhednar/user"
)

var jwtSecret = []byte("supersecretkey")

type server struct {
	userpb.UnimplementedUserServiceServer
	mu    sync.Mutex
	users map[string]*userpb.User
}

// CreateUser creates a new user
func (s *server) CreateUser(ctx context.Context, req *userpb.CreateUserRequest) (*userpb.User, error) {
	s.mu.Lock()
	defer s.mu.Unlock()

	id := fmt.Sprintf("%d", time.Now().UnixNano())
	user := &userpb.User{
		Id:    id,
		Name:  req.Name,
		Email: req.Email,
	}
	s.users[id] = user
	return user, nil
}

// UpdateUser updates a user
func (s *server) UpdateUser(ctx context.Context, req *userpb.UpdateUserRequest) (*userpb.User, error) {
	s.mu.Lock()
	defer s.mu.Unlock()

	user, exists := s.users[req.Id]
	if !exists {
		return nil, errors.New("user not found")
	}

	user.Name = req.Name
	user.Email = req.Email
	return user, nil
}

// DeleteUser deletes a user
func (s *server) DeleteUser(ctx context.Context, req *userpb.DeleteUserRequest) (*emptypb.Empty, error) {
	s.mu.Lock()
	defer s.mu.Unlock()

	delete(s.users, req.Id)
	return &emptypb.Empty{}, nil
}

/*
func (s *server) DeleteUser(ctx context.Context, req *userpb.DeleteUserRequest) (*userpb.Empty, error) {
	s.mu.Lock()
	defer s.mu.Unlock()

	delete(s.users, req.Id)
	return &userpb.Empty{}, nil
}
*/

// GenerateJWT generates a JWT token
func (s *server) GenerateJWT(ctx context.Context, req *userpb.JWTRequest) (*userpb.JWTResponse, error) {
	token, refreshToken, err := generateTokens(req.Email)
	if err != nil {
		return nil, err
	}
	return &userpb.JWTResponse{Token: token, RefreshToken: refreshToken}, nil
}

// RefreshJWT renews a JWT token
func (s *server) RefreshJWT(ctx context.Context, req *userpb.JWTRequest) (*userpb.JWTResponse, error) {
	token, refreshToken, err := generateTokens(req.Email)
	if err != nil {
		return nil, err
	}
	return &userpb.JWTResponse{Token: token, RefreshToken: refreshToken}, nil
}

// Helper: Generate JWT and Refresh Token
func generateTokens(email string) (string, string, error) {
	// Generate JWT
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"email": email,
		"exp":   time.Now().Add(time.Hour).Unix(),
	})
	tokenString, err := token.SignedString(jwtSecret)
	if err != nil {
		return "", "", err
	}

	// Generate Refresh Token
	refreshToken := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"email": email,
		"exp":   time.Now().Add(24 * time.Hour).Unix(),
	})
	refreshTokenString, err := refreshToken.SignedString(jwtSecret)
	if err != nil {
		return "", "", err
	}

	return tokenString, refreshTokenString, nil
}

func main() {

	certDir := "cert"
	serverCert := filepath.Join(certDir, "server-cert.pem")
	serverKey := filepath.Join(certDir, "server-key.pem")
	CACert := filepath.Join(certDir, "ca-cert.pem")
	// Load certificates for mTLS
	cert, err := tls.LoadX509KeyPair(serverCert, serverKey)
	if err != nil {
		log.Fatalf("Failed to load server cert/key: %v", err)
	}

	caCert, err := ioutil.ReadFile(CACert)
	if err != nil {
		log.Fatalf("Failed to load CA cert: %v", err)
	}

	caCertPool := x509.NewCertPool()
	caCertPool.AppendCertsFromPEM(caCert)

	creds := credentials.NewTLS(&tls.Config{
		Certificates: []tls.Certificate{cert},
		ClientCAs:    caCertPool,
		ClientAuth:   tls.RequireAndVerifyClientCert,
	})

	// Start gRPC server
	listener, err := net.Listen("tcp", ":50051")
	if err != nil {
		log.Fatalf("Failed to listen: %v", err)
	}

	grpcServer := grpc.NewServer(grpc.Creds(creds))
	userpb.RegisterUserServiceServer(grpcServer, &server{users: make(map[string]*userpb.User)})
	log.Println("Server running on port 50051")
	if err := grpcServer.Serve(listener); err != nil {
		log.Fatalf("Failed to serve: %v", err)
	}
}


... here is my client   

 cat ./cmd/client/main.go 
package main

import (
	"context"
	"crypto/tls"
	"crypto/x509"
	"fmt"
	"io/ioutil"
	"log"
	"path/filepath"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"

	// "userpb"
	userpb "github.com/scottstensland/ulfhednar/user"
)

func main() {

	certDir := "cert"
	clientCert := filepath.Join(certDir, "client-cert.pem")
	clientKey := filepath.Join(certDir, "client-key.pem")
	caCert := filepath.Join(certDir, "ca-cert.pem")

	// Load certificates for mTLS
	// cert, err := tls.LoadX509KeyPair("client-cert.pem", "client-key.pem")
	cert, err := tls.LoadX509KeyPair(clientCert, clientKey)
	if err != nil {
		log.Fatalf("Failed to load client cert/key: %v", err)
	}

	caCertBytes, errCA := ioutil.ReadFile(caCert)
	if err != nil {
		log.Fatalf("Failed to load CA cert: %v", errCA)
	}

	caCertPool := x509.NewCertPool()
	caCertPool.AppendCertsFromPEM(caCertBytes)

	creds := credentials.NewTLS(&tls.Config{
		Certificates: []tls.Certificate{cert},
		RootCAs:      caCertPool,
	})

	// Connect to gRPC server
	conn, err := grpc.Dial("localhost:50051", grpc.WithTransportCredentials(creds))
	if err != nil {
		log.Fatalf("Failed to connect: %v", err)
	}
	defer conn.Close()

	client := userpb.NewUserServiceClient(conn)

	// Create a user
	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	resp, err := client.CreateUser(ctx, &userpb.CreateUserRequest{
		Name:  "Alice",
		Email: "alice@example.com",
	})
	if err != nil {
		log.Fatalf("CreateUser failed: %v", err)
	}
	fmt.Printf("Created User: %v\n", resp)

	// Generate JWT
	jwtResp, err := client.GenerateJWT(ctx, &userpb.JWTRequest{
		Email: "alice@example.com",
	})
	if err != nil {
		log.Fatalf("GenerateJWT failed: %v", err)
	}
	fmt.Printf("Generated JWT: %v\n", jwtResp)
}


	
ANSWER 

/gtp

	https://chatgpt.com/c/678832c0-1d68-8004-bdce-ef0304633992




ChatGPT

Here is the sequence of openssl commands to generate the required certificates for mutual TLS (mTLS) for both your gRPC server and client:
1. Generate the CA Key and Certificate

This creates the ca-key.pem and ca-cert.pem files, which will be used to sign both the server and client certificates.

openssl genrsa -out ca-key.pem 2048
openssl req -x509 -new -nodes -key ca-key.pem -sha256 -days 365 -out ca-cert.pem -subj "/C=US/ST=YourState/L=YourCity/O=YourOrg/CN=YourCA"

2. Generate the Server Key and Certificate Signing Request (CSR)

This creates the server-key.pem and server.csr files. You will then use the CA to sign the server certificate.

openssl genrsa -out server-key.pem 2048
openssl req -new -key server-key.pem -out server.csr -subj "/C=US/ST=YourState/L=YourCity/O=YourOrg/CN=localhost"

3. Sign the Server Certificate with the CA

This creates the server-cert.pem file. Include the Subject Alternative Name (SAN) in the server certificate.

Create a configuration file server-ext.cnf with the following content:

[ v3_ext ]
authorityKeyIdentifier = keyid,issuer
basicConstraints = CA:FALSE
keyUsage = digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = localhost
IP.1 = 127.0.0.1

Sign the server certificate:

openssl x509 -req -in server.csr -CA ca-cert.pem -CAkey ca-key.pem -CAcreateserial \
  -out server-cert.pem -days 365 -sha256 -extfile server-ext.cnf -extensions v3_ext

4. Generate the Client Key and Certificate Signing Request (CSR)

This creates the client-key.pem and client.csr files.

openssl genrsa -out client-key.pem 2048
openssl req -new -key client-key.pem -out client.csr -subj "/C=US/ST=YourState/L=YourCity/O=YourOrg/CN=client"

5. Sign the Client Certificate with the CA

This creates the client-cert.pem file. Include clientAuth in the certificate.

Create a configuration file client-ext.cnf with the following content:

[ v3_ext ]
authorityKeyIdentifier = keyid,issuer
basicConstraints = CA:FALSE
keyUsage = digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = client

Sign the client certificate:

openssl x509 -req -in client.csr -CA ca-cert.pem -CAkey ca-key.pem -CAcreateserial \
  -out client-cert.pem -days 365 -sha256 -extfile client-ext.cnf -extensions v3_ext

6. Verify the Certificates

    Verify the CA certificate:

openssl x509 -in ca-cert.pem -noout -text

Verify the server certificate:

openssl x509 -in server-cert.pem -noout -text

Verify the client certificate:

    openssl x509 -in client-cert.pem -noout -text

Final Directory Structure

After running these commands, your cert directory will contain:

    ca-key.pem: Private key for the CA.
    ca-cert.pem: Public certificate for the CA.
    server-key.pem: Private key for the server.
    server-cert.pem: Public certificate for the server.
    client-key.pem: Private key for the client.
    client-cert.pem: Public certificate for the client.

7. Update Your Code

    Server: Ensure the server uses server-key.pem, server-cert.pem, and ca-cert.pem.
    Client: Ensure the client uses client-key.pem, client-cert.pem, and ca-cert.pem.

This configuration will enable mutual TLS authentication between your gRPC server and client. Let me know if you need any additional assistance!


